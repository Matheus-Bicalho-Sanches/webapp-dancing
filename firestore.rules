rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função auxiliar para verificar se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função auxiliar para verificar se o usuário é master
    function isMasterUser(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.userType == 'master';
    }
    
    // Função auxiliar para verificar se o usuário é administrativo
    function isAdministrativeUser(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.userType == 'administrative';
    }
    
    // Função auxiliar para verificar se o usuário é do tipo ateliê
    function isAtelierUser(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.userType == 'atelier';
    }
    
    // Função auxiliar para verificar se o usuário é do tipo limpeza
    function isCleaningUser(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.userType == 'cleaning';
    }
    
    // Função auxiliar para verificar se o usuário é do tipo professor
    function isTeacherUser(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.userType == 'teacher';
    }
    
    // Função auxiliar para verificar se o usuário atual é master
    function isCurrentUserMaster() {
      return isAuthenticated() && isMasterUser(request.auth.uid);
    }

    // Função auxiliar para verificar se o usuário atual é master ou administrativo
    function isCurrentUserMasterOrAdmin() {
      return isAuthenticated() && 
        (isMasterUser(request.auth.uid) || isAdministrativeUser(request.auth.uid));
    }
    
    // Função auxiliar para verificar se o usuário atual é master, administrativo ou ateliê
    function isCurrentUserMasterOrAdminOrAtelier() {
      return isAuthenticated() && 
        (isMasterUser(request.auth.uid) || isAdministrativeUser(request.auth.uid) || isAtelierUser(request.auth.uid));
    }
    
    // Função auxiliar para verificar se o usuário atual pode gerenciar tarefas
    function canManageTasks() {
      return isAuthenticated() && 
        (isMasterUser(request.auth.uid) || isAdministrativeUser(request.auth.uid) || 
         isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
    }

    // Regras para a coleção users
    match /users/{userId} {
      // Permitir leitura para usuários autenticados
      allow read: if isAuthenticated();
      
      // Permitir criação se o usuário está autenticado e é o próprio usuário ou master
      allow create: if isAuthenticated() && 
        (isCurrentUserMaster() || userId == request.auth.uid);
      
      // Permitir atualização se:
      // 1. O usuário está autenticado E
      // 2. É master OU está editando seu próprio documento
      allow update: if isAuthenticated() && 
        (isCurrentUserMaster() || userId == request.auth.uid);
      
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção alunos
    match /alunos/{alunoId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção matriculas
    match /matriculas/{matriculaId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isCurrentUserMasterOrAdmin();
    }
    
    // Regras para a coleção pagamentos
    match /pagamentos/{pagamentoId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção planos
    match /planos/{planoId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para horários - permitir leitura pública
    match /horarios/{horarioId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Regras para agendamentos e seus horários - permitir leitura pública
    match /agendamentos/{agendamentoId} {
      allow read: if true; // Permitir leitura pública para verificar horários ocupados
      allow write: if true; // Permitir criação de agendamentos sem autenticação
      
      match /horarios/{horarioId} {
        allow read: if true; // Permitir leitura pública dos horários dos agendamentos
        allow write: if true; // Permitir criação de horários de agendamento sem autenticação
      }
    }
    
    // Regras para professores - permitir leitura pública
    match /professores/{professorId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para valores das aulas - permitir leitura pública
    match /valores_aulas/{valorId} {
      allow read: if true;
      allow write: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção tarefas
    match /tarefas/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção tarefas_diarias
    match /tarefas_diarias/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção tarefas_semanais
    match /tarefas_semanais/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção tarefas_mensais
    match /tarefas_mensais/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção tarefas_tecnicas
    match /tarefas_tecnicas/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção tarefas_por_horario
    match /tarefas_por_horario/{tarefaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção movimentacoes
    match /movimentacoes/{movimentacaoId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção turmasData
    match /turmasData/{turmaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção produtos
    match /produtos/{produtoId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Novas regras para a coleção products (específica para a cantina)
    match /products/{productId} {
      // Leitura permitida para usuários autenticados
      allow read: if isAuthenticated();
      
      // Escrita permitida para master ou administrativo
      allow write: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      
      // Atualização de estoque permitida para master ou administrativo
      allow update: if isAuthenticated() && 
        isCurrentUserMasterOrAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']);
    }

    // Regras para a coleção task_logs
    match /task_logs/{logId} {
      // Permitir leitura para usuários autenticados
      allow read: if isAuthenticated();
      
      // Permitir criação/atualização/exclusão para master, administrativo, limpeza ou professor
      allow write: if isAuthenticated() && (isCurrentUserMasterOrAdmin() || isCleaningUser(request.auth.uid) || isTeacherUser(request.auth.uid));
    }

    // Regras para a coleção leads
    match /leads/{leadId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção uniforms
    match /uniforms/{uniformId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdminOrAtelier();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção vendas
    match /vendas/{vendaId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdminOrAtelier();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção uniform_sales
    match /uniform_sales/{saleId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isCurrentUserMasterOrAdminOrAtelier();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }

    // Regras para a coleção logs
    match /logs/{logId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção teacherSchedules e suas subcoleções
    match /teacherSchedules/{professorId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      
      // Regras para a subcoleção slots
      match /slots/{slotId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isCurrentUserMasterOrAdmin();
      }
    }
    
    // Regras para a coleção ai_conversations - Nova coleção para IA
    match /ai_conversations/{conversationId} {
      // Permitir leitura apenas para usuários master
      allow read: if isAuthenticated() && isCurrentUserMaster();
      
      // Permitir criação/atualização apenas para usuários master
      allow create, update: if isAuthenticated() && isCurrentUserMaster();
      
      // Permitir exclusão apenas para usuários master
      allow delete: if isAuthenticated() && isCurrentUserMaster();
    }
    
    // Regras para a coleção ai_queries - Histórico de consultas à IA
    match /ai_queries/{queryId} {
      // Permitir leitura apenas para usuários master
      allow read: if isAuthenticated() && isCurrentUserMaster();
      
      // Permitir criação apenas para usuários master
      allow create: if isAuthenticated() && isCurrentUserMaster();
      
      // Não permitir atualização ou exclusão após criação (para manter o histórico)
      allow update, delete: if false;
    }
  }
} 