{
  "documentation": "# Documentação da API Asaas (v3) – Guia Completo Integrado\n\nA API Asaas permite que você automatize processos de cobrança, pagamentos e recebimentos de forma fácil e segura, utilizando diversas formas de pagamento (PIX, boleto bancário, cartão de crédito/débito e TED). Além disso, oferece recursos como notificações automáticas, link de pagamento, split de pagamentos, assinaturas recorrentes, tokenização de cartões (cofre de cartões), antecipação de recebíveis, webhooks e mais. Esta documentação consolidada fornece uma visão completa e atualizada da API Asaas, com exemplos práticos em JSON e melhores práticas, de modo que mesmo um desenvolvedor iniciante possa integrar a API ao seu webapp (ex.: front-end em JavaScript) de forma eficaz.\n\n**Índice:**\n\n1. [Visão Geral da API e Ambientes (Sandbox vs. Produção)](#visao-geral)\n2. [Autenticação e Segurança](#autenticacao)\n3. [Cadastro de Clientes via API](#clientes)\n4. [Criação de Cobranças e Pagamentos (Invoices/Payments)](#cobrancas)\n   - 4.1 [Cobrança via Boleto](#boleto)\n   - 4.2 [Cobrança via Pix](#pix)\n   - 4.3 [Cobrança via Cartão de Crédito (Pagamento não recorrente)](#cartao)\n   - 4.4 [Tokenização de Cartão de Crédito](#tokenizacao)\n   - 4.5 [Parcelamento no Cartão de Crédito](#parcelamento)\n5. [Assinaturas (Pagamentos Recorrentes)](#assinaturas)\n   - 5.1 [Criando Assinatura via Cartão de Crédito](#assinatura-cartao)\n   - 5.2 [Gerenciamento de Assinaturas (alterações e cancelamento)](#gerenciar-assinatura)\n6. [Notificações e Webhooks](#webhooks)\n7. [Outros Endpoints e Funcionalidades Relevantes](#outros)\n   - 7.1 [Consultando Cobranças e Pagamentos](#consulta-cobrancas)\n   - 7.2 [Estornos (Reembolsos) de Pagamentos](#estornos)\n   - 7.3 [Links de Pagamento](#payment-link)\n   - 7.4 [Transferências de Fundos](#transferencias)\n8. [Melhores Práticas de Implementação](#melhores-praticas)\n9. [Exemplos de Requisições e Respostas](#exemplos-json)\n\n<a name=\"visao-geral\"></a>\n## 1. Visão Geral da API e Ambientes (Sandbox vs. Produção)\n\nA API do Asaas está disponível em dois ambientes distintos:\n\n- **Produção:** `https://api.asaas.com/v3` – Para transações reais com sua conta Asaas.\n- **Sandbox (Teste):** `https://api-sandbox.asaas.com/v3` – Ambiente de testes onde você pode realizar requisições fictícias sem impacto financeiro real. Deve ser usado durante o desenvolvimento e homologação antes de migrar para produção.\n\nCada ambiente possui uma **Chave de API (API Key)** específica. Certifique-se de usar a chave e URL correspondentes ao ambiente desejado; por exemplo, usar a chave de sandbox junto com a URL de sandbox, e trocar para a chave de produção quando apontar para a URL de produção.\n\n**Formato da API:** A API Asaas é RESTful e utiliza JSON para enviar e receber dados. As chamadas devem ser feitas via HTTPS (TLS) para garantir segurança – **sempre use `https://`**, pois chamadas não criptografadas (`http://`) não são suportadas. As respostas da API também vêm em formato JSON, incluindo em casos de erro.\n\n**Versão da API:** Esta documentação refere-se à versão 3 da API (indicada na URL `/v3/`). \n\n<a name=\"autenticacao\"></a>\n## 2. Autenticação e Segurança\n\nPara autenticar suas requisições, você deve incluir no **header HTTP** um campo `access_token` contendo sua chave de API. Além disso, defina o `Content-Type` como `application/json` em todas as requisições com corpo JSON. Exemplo de cabeçalhos mínimos necessários em cada requisição:\n\n```http\nContent-Type: application/json  \nUser-Agent: <nome_da_sua_aplicacao>  \naccess_token: <sua_api_key>\n```\n\n- **Gerando sua API Key:** A chave de API pode ser gerada na interface web do Asaas (em *Integrações > Chave de API > Gerar nova chave*). Apenas usuários administradores da conta podem visualizar essa opção. Por segurança, a chave **só é exibida uma única vez** no momento da geração – copie e armazene-a em local seguro (fora do código-fonte e não a envie por emails ou chats). Se perder a chave, será necessário gerar uma nova, pois ela é irrecuperável.\n\n- **Múltiplas chaves e gestão:** Atualmente é possível ter até **10 chaves de API por conta**, podendo nomeá-las e definir data de expiração para cada uma. Você pode desativar ou excluir chaves conforme necessário (lembrando que ao excluir não há como recuperar) e, se gerar uma nova chave, a anterior é invalidada automaticamente.\n\n- **Uso de `User-Agent`:** O Asaas **requer** que clientes de API enviem um header `User-Agent` identificando sua aplicação. Para contas raiz criadas a partir de 13/06/2024, esse header tornou-se obrigatório em todas as requisições. Recomenda-se usar o nome do seu sistema ou aplicativo; caso seu framework HTTP já adicione um User-Agent padrão, ele pode ser aceito.\n\n- **Erros 401 – Dicas:** Um erro de autenticação (`401 Unauthorized`) indica que a API Key não foi validada. Em caso de erro 401, verifique se:\n  1. Você está enviando a API Key no header da requisição (`access_token` está presente).\n  2. O header está escrito exatamente como `access_token` (atenção à grafia).\n  3. A chave utilizada corresponde ao ambiente certo (não usar chave de produção na URL de sandbox, por exemplo).\n  4. O endpoint da URL está correto para o ambiente (ex.: usando `api-sandbox.asaas.com` em sandbox).\n  5. A chave não foi regenerada ou invalidada (se estiver em dúvida, gere uma nova chave e teste novamente).\n\n- **Segurança da chave:** Nunca exponha sua API Key no front-end (JavaScript público) ou em repositórios de código abertos. Trate-a como uma senha: guarde em variáveis de ambiente ou cofres de segurança no back-end. O Asaas não armazena sua chave após gerada, e não solicitará a chave em atendimentos de suporte. Evite também logar a chave em arquivos de log da aplicação para não vazar acidentalmente.\n\n- **Mecanismos adicionais:** Considere usar mecanismos extras de segurança fornecidos pelo Asaas, como restrição de IPs ou validação de Webhooks, conforme descrito na documentação de segurança. Assim, mesmo que sua chave vaze, o uso indevido pode ser mitigado.\n\n- **Permissões:** Algumas funcionalidades avançadas (ex: tokenização de cartão em produção, receber erros detalhados de transações) podem requerer habilitação manual pela equipe Asaas, pois envolvem avaliação de risco. Esses casos serão mencionados adiante quando aplicáveis.\n\nCom a autenticação configurada, podemos prosseguir para os principais recursos da API: cadastro de clientes, criação de cobranças/pagamentos e assinaturas.\n\n<a name=\"clientes\"></a>\n## 3. Cadastro de Clientes via API\n\nAntes de criar uma cobrança (payment), é necessário cadastrar ou identificar o cliente pagador. Cada cobrança no Asaas está vinculada a um **cliente**, identificado por um ID único. Assim, o primeiro passo geralmente é criar um cliente via API ou recuperar um cliente existente.\n\n**Endpoint:** `POST /v3/customers` – Cria um novo cliente.\n\n**Exemplo de requisição (Cadastro de cliente):**\n\n```json\n{\n    \"name\": \"Marcelo Almeida\",\n    \"cpfCnpj\": \"24971563792\",\n    \"mobilePhone\": \"4799376637\"\n}\n```\n\nNo exemplo acima, estamos criando um cliente de nome \"Marcelo Almeida\" com CPF e telefone celular informados. Você pode (e deve) enviar também outros dados importantes, como **email**, **telefone fixo**, **endereço** etc., caso disponíveis, para ter um cadastro mais completo. A API retornará um objeto JSON representando o cliente criado, incluindo um campo `id` – por exemplo:\n\n```json\n{\n    \"id\": \"cus_000005219613\",\n    \"name\": \"Marcelo Almeida\",\n    \"cpfCnpj\": \"24971563792\",\n    \"mobilePhone\": \"4799376637\",\n    \"email\": \"[email protected]\",\n    ... outros campos ...\n}\n```\n\nO campo \"id\" (no formato \"cus_xxxxxxxx\") é o identificador único do cliente recém-criado. Guarde este ID, pois ele será necessário para vincular o cliente às cobranças que você criar. Com o identificador em mãos, já é possível criar uma cobrança associada a este cliente.\n\n> **Observação:** A API **permite criar clientes duplicados** (mesmo CPF/CNPJ, por exemplo). Não há um bloqueio automático para duplicidade de cadastro. Se sua regra de negócio exige unicidade (por exemplo, não cadastrar o mesmo cliente duas vezes), você deve implementar essa verificação. Pode fazê-lo armazenando os IDs já criados ou usando a própria API para **listar/buscar clientes** antes de criar novos. A API oferece um endpoint `GET /v3/customers?cpfCnpj={valor}` ou filtros por nome/email para localizar clientes existentes e evitar duplicidades.\n\n**Operações adicionais de Clientes:** Além de criar, é possível:\n\n- **Listar clientes:** `GET /v3/customers` (com paginação e filtros por nome, CPF/CNPJ etc.) – retorna todos os clientes cadastrados.\n- **Recuperar um cliente específico:** `GET /v3/customers/{id}` – retorna os dados de um cliente pelo ID.\n- **Atualizar cliente:** `PUT /v3/customers/{id}` – altera dados de um cliente existente (enviar somente campos a alterar).\n- **Remover cliente:** `DELETE /v3/customers/{id}` – remove (inativa) um cliente. Obs.: O Asaas permite posteriormente **restaurar** um cliente removido se necessário.\n- **Restaurar cliente removido:** `POST /v3/customers/{id}/restore` – reativa um cliente previamente deletado.\n\nPara detalhes de campos aceitos e respostas desses endpoints, confira a [Referência completa de Clientes (`/v3/customers`)] no portal do Asaas.\n\nCom o cliente criado, podemos passar à criação de cobranças (pagamentos) vinculadas a esse cliente.\n\n<a name=\"cobrancas\"></a>\n## 4. Criação de Cobranças e Pagamentos\n\nNo Asaas, **cobranças** (também chamadas de *payments* na API) representam solicitações de pagamento que você emite ao cliente. Cada cobrança possui um valor, uma data de vencimento e uma forma de pagamento configurada. Através da API, você cria cobranças que podem gerar boletos, QR Codes Pix, cobranças no cartão de crédito, links de pagamento, etc., de acordo com o tipo especificado.\n\n**Endpoint principal:** `POST /v3/payments` – Cria uma nova cobrança. Este endpoint é bastante flexível e abrange múltiplos cenários dependendo dos parâmetros enviados.\n\nAo criar uma cobrança, informe no corpo JSON pelo menos: o `customer` (ID do cliente a ser cobrado), o `value` (valor a cobrar) e o `billingType` (forma de pagamento). Opcionalmente, informe `dueDate` (data de vencimento desejada) e outros campos conforme a modalidade. A resposta da API será um objeto representando a cobrança, incluindo um `id` (identificador do payment) e diversos detalhes úteis (status, URLs para pagamento, etc.).\n\nOs valores possíveis para **`billingType`** incluem: \n\n- \"BOLETO\" – Boleto bancário.\n- \"PIX\" – Pix (QRCode dinâmico).\n- \"CREDIT_CARD\" – Cartão de crédito.\n- \"DEBIT_CARD\" – Cartão de débito (usar como CREDIT_CARD via interface, ver adiante).\n- \"UNDEFINED\" – Cobrança sem forma pré-definida (permite que o cliente escolha como pagar na página do Asaas, podendo incluir opções de boleto, Pix e cartão).\n\nA seguir, detalhamos cada modalidade de cobrança com exemplos.\n\n<a name=\"boleto\"></a>\n### 4.1 Cobrança via Boleto\n\nAo criar uma cobrança com `billingType: \"BOLETO\"`, o Asaas gera automaticamente um boleto bancário para pagamento. Não é necessário integrar com banco – o Asaas emite o boleto e gerencia seu pagamento. A taxa do boleto só é cobrada se ele for pago, caso contrário não há custo.\n\n**Exemplo – Criar cobrança de boleto:**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"BOLETO\",\n    \"value\": 100.00,\n    \"dueDate\": \"2023-07-21\"\n}\n```\n\n- `customer`: ID do cliente a ser cobrado (obtido na criação do cliente).\n- `value`: valor (R$ 100,00 no exemplo).\n- `dueDate`: data de vencimento do boleto no formato YYYY-MM-DD. Se omitido, pode assumir data atual ou padrão imediato.\n- Campos adicionais opcionais: é possível enviar `description` (descrição da cobrança), `externalReference` (código próprio de identificação), entre outros.\n\n**Resposta:** Ao criar um boleto, a resposta conterá informações como `dueDate`, `invoiceUrl` (URL da fatura online) e, especificamente para boleto, o campo **`bankSlipUrl`**, que é o link para o PDF do boleto gerado. Você pode fornecer essa URL ao cliente para baixar/imprimir o boleto, ou mesmo incorporá-la em seu sistema.\n\n> **Exemplo de campo de resposta:** \"bankSlipUrl\": \"https://www.asaas.com/b/pdf/123456789\" (URL do PDF do boleto).\n\nCaso precise enviar boletos impressos, a API também permite gerar um **Carnê de Pagamentos** (quando a cobrança é parcelada, ver adiante).\n\n**Parcelamento em boleto:** É possível criar cobrança parcelada via boleto. Basta informar, além do `value` total, os campos `installmentCount` (número de parcelas) e `installmentValue` (valor de cada parcela) na requisição. O Asaas então gera múltiplos boletos correspondentes. A resposta incluirá um campo `installment` com um ID de parcelamento. Com esse ID, você pode gerar um **Carnê** (um PDF consolidado) contendo todos os boletos.\n\n- **Exemplo – Cobrança parcelada em 10x no boleto:**\n\n  ```json\n  {\n      \"customer\": \"cus_000005219613\",\n      \"billingType\": \"BOLETO\",\n      \"value\": 2000.00,\n      \"dueDate\": \"2023-07-21\",\n      \"installmentCount\": 10,\n      \"installmentValue\": 200.00\n  }\n  ```\n\n  Nesse exemplo, `installmentCount: 10` e `installmentValue: 200.00` resultam em 10 boletos de R$200, totalizando R$2000. O campo \"installment\" na resposta trará o ID do parcelamento (por ex. \"installment\": \"24ef7e81-...c3d7\")\n\n- **Gerar Carnê:** Para obter o PDF do carnê com todos os boletos parcelados, faça uma requisição `GET /v3/installments/{id}/paymentBook`, substituindo `{id}` pelo ID do parcelamento obtido. A resposta desse GET será um PDF (em base64 ou link) contendo todos os boletos organizados.\n\n**Descontos, Juros e Multa:** Você pode configurar descontos por antecipação, assim como juros e multa por atraso, ao criar a cobrança de boleto. Isso é feito através do objeto `discount` (para descontos) e `fine`/`interest` (para multa e juros) nos campos JSON:\n\n- *Exemplo:* Para dar **10% de desconto** a quem pagar até 5 dias **antes** do vencimento, incluir na requisição:\n\n  ```json\n  \"discount\": {\n      \"value\": 10,\n      \"dueDateLimitDays\": 5,\n      \"type\": \"PERCENTAGE\"\n  }\n  ```\n\n  Onde `type: \"PERCENTAGE\"` indica que `value` é porcentagem de desconto (poderia ser \"FIXED\" para valor fixo). Já `dueDateLimitDays: 5` indica que até 5 dias antes do vencimento o desconto é válido. Similarmente, pode-se usar campos `interest` (juros ao mês) e `fine` (multa percentual) para configurar encargos por atraso.\n\n<a name=\"pix\"></a>\n### 4.2 Cobrança via Pix\n\nPara receber via **Pix**, utilize `billingType: \"PIX\"`. O Asaas gera um QR Code Pix dinâmico para a cobrança, integrado à sua conta transacional ou chave Pix configurada.\n\n**Exemplo – Criar cobrança por Pix:**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"PIX\",\n    \"value\": 100.90,\n    \"dueDate\": \"2023-07-21\"\n}\n```\n\nA criação em si é semelhante ao boleto (valor e vencimento). Certifique-se de ter cadastrado ao menos uma **Chave Pix** na sua conta Asaas para usar em cobranças Pix (pode ser feita via dashboard ou API).\n\nApós criar a cobrança Pix, a resposta inicial contém o `id` da cobrança e um status pendente. O QR Code em si não vem diretamente na resposta de criação. Para obtê-lo, faça em seguida:\n\n- **Consultar QR Code Pix:** `GET /v3/payments/{id}/pixQrCode` – Este endpoint retorna os dados do Pix da cobrança especificada. No retorno, você terá:\n  - `encodedImage`: string Base64 da imagem do QR Code (pode ser exibida diretamente em uma tag `<img>` no front-end após decodificar prefixo).\n  - `payload`: o código Pix copia-e-cola (texto que representa o QR Code, que pode ser copiado manualmente).\n  - `expirationDate`: data/hora de expiração do QR Code.\n\nCom esses dados, você pode mostrar o QR code ao cliente (gerando a imagem a partir do Base64) e/ou fornecer o código para cópia.\n\n> **Notas sobre o Pix dinâmico:** O QR Code gerado pelo Asaas é do tipo dinâmico com vencimento associado. Ele expira 12 meses após a data de vencimento definida para a cobrança. Cada QR Code só pode ser pago uma única vez e, se a cobrança for atualizada (ex: valor ou vencimento alterado), é necessário **gerar um novo QR Code** consultando novamente o endpoint acima. \n>\n> Atualmente, o Asaas **permite gerar um QR Code Pix mesmo sem chave Pix própria cadastrada**, utilizando uma chave de instituição parceira. Contudo, esse QR code “sem chave” expira no fim do dia (até 23:59) e a funcionalidade será descontinuada no futuro. Por isso, é altamente recomendável **cadastrar sua própria chave Pix** no Asaas para usufruir do Pix sem limitações.\n\nTal como o boleto, o Pix também suporta inclusão de desconto antecipado, multa e juros (usando os mesmos campos `discount`, `interest`, `fine` na criação). Também é possível criar cobranças parceladas via Pix, mas elas funcionam de forma análoga à parcelada por boleto, com múltiplos QR codes.\n\n**Notificações de pagamento:** Quando o boleto ou o Pix forem pagos, o Asaas mudará o status da cobrança para **RECEIVED** e pode disparar **webhooks** ou notificações. Você pode também consultar o status via API (GET /payments/{id}) periodicamente, mas a abordagem recomendada é usar webhooks.\n\n<a name=\"cartao\"></a>\n### 4.3 Cobrança via Cartão de Crédito (Pagamento não recorrente)\n\nO Asaas permite cobrar via **Cartão de Crédito** de duas formas principais:\n\n**A. Redirecionamento para página de pagamento Asaas (cliente insere os dados do cartão):**\n**B. Envio dos dados do cartão via API (pagamento imediato através da API)**.\n\nAmbas utilizam o `billingType: \"CREDIT_CARD\"`, porém o fluxo difere conforme você decide capturar os dados do cartão no seu sistema ou não.\n\n#### A) Cobrança com Redirecionamento (Invoice URL)\n\nNo método mais simples, você **não** envia dados de cartão na requisição. Basta criar a cobrança definindo \"billingType\": \"CREDIT_CARD\" (e.g., tal como boleto, mas trocando o tipo) e fornecer `customer`, `value` e `dueDate`. \n\n**Exemplo – Criar cobrança de cartão (sem dados do cartão):**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 109.90,\n    \"dueDate\": \"2023-07-21\"\n}\n```\n\nA resposta conterá um campo **`invoiceUrl`**, que é a URL da fatura/página de pagamento dessa cobrança. Você deve redirecionar o cliente para essa URL, onde ele mesmo informará os dados do cartão na interface segura do Asaas. Essa página é fornecida pelo Asaas e já lida com todo o fluxo de inserção dos dados do cartão (incluindo opção de cartão de **débito** se disponível – note que se `billingType` for \"CREDIT_CARD\" ou \"UNDEFINED\", a interface de pagamento **oferecerá** também a opção de cartão de débito para o cliente, automaticamente).\n\nEsse fluxo é útil para quem não quer lidar diretamente com dados sensíveis de cartão no próprio sistema, aproveitando a página segura do Asaas. Após o pagamento nesta página, o status da cobrança será atualizado para Pago (ou pendente, caso parcelado e pago parcialmente), e você poderá receber notificação via webhook.\n\n#### B) Cobrança com Captura de Dados via API (Pagamento Imediato)\n\nNo segundo método, mais avançado, você coleta os dados do cartão do cliente em seu próprio formulário (por exemplo, no front-end do seu site) **e os envia diretamente para a API** para processar a cobrança. **Atenção:** se optar por este método, **é obrigatório que seu site use conexão segura (SSL/HTTPS)** ao coletar os dados do cartão, caso contrário sua conta Asaas pode ser bloqueada. Isso é uma exigência de segurança (PCI-DSS) para proteger os dados dos cartões.\n\nPara realizar o pagamento imediato via API, inclua dois objetos no JSON da requisição de criação da cobrança:\n\n- **`creditCard`:** com os dados do cartão do cliente (`holderName`, `number` do cartão, `expiryMonth`, `expiryYear`, `ccv`).\n- **`creditCardHolderInfo`:** com os dados do titular do cartão (nome completo, CPF/CNPJ, email, CEP, endereço/número, telefone). Esses dados devem coincidir com os dados do emissor/cartão para evitar recusas por suspeita de fraude.\n\n**Exemplo – Criar cobrança já com dados do cartão (pagamento imediato):**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 100.00,\n    \"dueDate\": \"2023-07-21\",\n    \"creditCard\": {\n        \"holderName\": \"marcelo h almeida\",\n        \"number\": \"5162306219378829\",\n        \"expiryMonth\": \"05\",\n        \"expiryYear\": \"2024\",\n        \"ccv\": \"318\"\n    },\n    \"creditCardHolderInfo\": {\n        \"name\": \"Marcelo Henrique Almeida\",\n        \"email\": \"[email protected]\",\n        \"cpfCnpj\": \"24971563792\",\n        \"postalCode\": \"89223-005\",\n        \"addressNumber\": \"277\",\n        \"addressComplement\": null,\n        \"phone\": \"4738010919\",\n        \"mobilePhone\": \"47998781877\"\n    },\n    \"remoteIp\": \"116.213.42.532\"\n}\n```\n\nNo exemplo, adicionamos os campos `creditCard` e `creditCardHolderInfo` dentro do JSON da cobrança, preenchendo-os com os dados do cartão de teste. O campo `remoteIp` também foi enviado (IP do cliente que está realizando a compra), o que pode ajudar na análise anti-fraude.\n\n- O nome do portador no cartão (`holderName`) pode ser enviado em letras minúsculas/maiúsculas, mas deve ser exatamente como no cartão.\n- Certifique-se de enviar mês e ano de validade corretos (sempre com dois dígitos para mês e quatro para ano).\n- O CPF/CNPJ e demais dados do titular devem ser coerentes; divergências podem resultar em transação negada pelo banco emissor ou pela análise de risco.\n\n**Comportamento:** Quando você envia os dados do cartão:\n- Se a transação for **autorizada** pela operadora do cartão, a cobrança é criada e marcada como *recebida/paga* (status atualizado imediatamente). A API retornará HTTP 200 OK com os detalhes da cobrança confirmada.\n- Se a transação **for negada**, a cobrança **não** é criada (não fica nem pendente no sistema) e a API retorna um erro HTTP 400 (Bad Request) indicando falha na autorização. Nenhuma cobrança será registrada no sistema em caso de falha de pagamento imediato.\n\n> **Importante:** Independente da `dueDate` informada, **a captura do valor no cartão ocorre no momento da criação da cobrança** quando os dados do cartão são enviados. Ou seja, mesmo que `dueDate` seja futura, no fluxo de pagamento imediato o cliente será cobrado imediatamente.\n>\n> **Dicas de implementação com cartão:**  \n> - Garanta o uso de **HTTPS** em sua página de checkout (conforme já destacado).\n> - Para evitar problemas de timeout da requisição (pois a comunicação com operadoras pode demorar alguns segundos), configure um **timeout mínimo de 60 segundos** para a chamada de criação de cobrança com cartão. Isso previne que seu sistema considere a requisição fracassada enquanto a transação ainda está em processamento, evitando tentativas duplicadas.\n> - Em ambiente **Sandbox**, use os **números de cartão de teste** fornecidos pelo Asaas para simular cenários. Por exemplo, o cartão `5162 3062 1937 8829` (Mastercard) acima é um número de teste que pode ser usado no sandbox. Há outros números de bandeiras distintas disponíveis na documentação de Sandbox/Testes. Esses cartões não representam transações reais e servem para você validar integrações (no sandbox não há cobrança de valores reais).\n> - O Asaas retorna erros genéricos para falha de cartão (ex.: código `invalid_creditCard` com descrição \"Transação não autorizada. Verifique os dados do cartão...\" ) por segurança, evitando expor ao usuário final o motivo exato (que poderia ser usado maliciosamente para testar cartões válidos). Você pode, contudo, solicitar à Asaas habilitar o envio de erros detalhados para sua conta (após análise), **mas nunca exiba o erro detalhado diretamente ao cliente**. Use-o apenas para logs internos ou tomada de decisão (ex.: pedir para o cliente tentar outro cartão).\n\n<a name=\"tokenizacao\"></a>\n### 4.4 Tokenização de Cartão de Crédito\n\nA **tokenização** é uma funcionalidade que visa facilitar cobranças futuras no cartão do mesmo cliente, sem precisar pedir os dados do cartão novamente, e sem que seu sistema armazene informações sensíveis. O Asaas, ao realizar uma transação com cartão, pode retornar um **token** que representa aquele cartão do cliente. Esse token pode ser guardado e utilizado em requisições subsequentes, substituindo os dados completos do cartão.\n\n**Obtenção automática do token:** Ao realizar uma primeira transação de cartão de crédito para um cliente (no modelo de **pagamento imediato via API** descrito acima), repare que a resposta da API incluirá um campo `creditCardToken`. Esse token identifica o cartão usado pelo cliente na transação.\n\nCom esse token em mãos, nas próximas cobranças para **o mesmo cliente**, você **não precisa enviar** `creditCard` nem `creditCardHolderInfo`. Em vez disso, envie apenas o campo `creditCardToken` no corpo da requisição, juntamente com `customer`, `billingType: \"CREDIT_CARD\"` e valor/demais campos:\n\n**Exemplo – Utilizando um creditCardToken em nova cobrança:**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 100.00,\n    \"dueDate\": \"2023-07-21\",\n    \"creditCardToken\": \"76496073-536f-4835-80db-c45d00f33695\",\n    \"remoteIp\": \"116.213.42.532\"\n}\n```\n\nNesta requisição, assumimos que \"76496073-...\" é o token retornado anteriormente para o cartão do cliente `cus_000005219613`. Ao usar `creditCardToken`, a API entenderá que deve cobrar no cartão tokenizado e **não exigirá os dados brutos do cartão novamente**. Isso agiliza o processo e melhora a segurança.\n\n**Gerando um token manualmente (sem cobrar):** Você pode tokenizar um cartão **a qualquer momento**, mesmo sem efetuar uma cobrança imediata. O Asaas disponibiliza um endpoint específico para isso:\n\n- **Endpoint de Tokenização:** `POST /v3/creditCard/tokenize` – Gera um token a partir de dados de cartão fornecidos.\n\n**Exemplo – Tokenizar cartão via API:**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"creditCard\": {\n        \"holderName\": \"marcelo h almeida\",\n        \"number\": \"5162306219378829\",\n        \"expiryMonth\": \"05\",\n        \"expiryYear\": \"2024\",\n        \"ccv\": \"318\"\n    },\n    \"creditCardHolderInfo\": {\n        \"name\": \"Marcelo Henrique Almeida\",\n        \"email\": \"[email protected]\",\n        \"cpfCnpj\": \"24971563792\",\n        \"postalCode\": \"89223-005\",\n        \"addressNumber\": \"277\",\n        \"addressComplement\": null,\n        \"phone\": \"4738010919\",\n        \"mobilePhone\": \"47998781877\"\n    },\n    \"remoteIp\": \"116.213.42.532\"\n}\n```\n\nEsta requisição é praticamente idêntica à de criar uma cobrança com pagamento imediato, porém direcionada ao endpoint de tokenização. Como resultado, a API retornará um objeto contendo um novo `creditCardToken`, bem como os **últimos 4 dígitos do cartão** (`creditCardNumber`) e a **bandeira** (`creditCardBrand`). Por exemplo:\n\n```json\n{\n    \"creditCardToken\": \"76496073-536f-4835-80db-c45d00f33695\",\n    \"creditCardNumber\": \"8829\",\n    \"creditCardBrand\": \"MASTERCARD\"\n}\n```\n\nEste retorno permite, por exemplo, que você exiba em tela: \"Cartão final 8829 (Mastercard) salvo\". Com o token, você pode futuramente criar cobranças para esse cliente usando o fluxo demonstrado anteriormente.\n\n> **Observações sobre Tokenização:**  \n> - No ambiente **Sandbox**, a tokenização já vem **habilitada por padrão** e pode ser testada livremente. Já em **produção**, por motivos de segurança, **é preciso solicitar ao seu gerente de contas Asaas a habilitação da tokenização** para sua conta. A equipe do Asaas fará uma análise de risco antes de liberar, pois armazenar tokens de cartão implica em responsabilidade adicional (apesar de seguro, requer compliance).\n> - O token de cartão é armazenado **por cliente**. Você **não pode usar** o token de um cartão de um cliente em outro cliente. Isso significa que o `customer` deve ser sempre o mesmo que originou o token. Essa restrição aumenta a segurança.\n> - **Armazenamento seguro:** Embora o token não seja considerado dado sensível (não expõe número completo, CVV, etc.), trate-o com cuidado. Ele permite transações e, se exposto, alguém poderia tentar usá-lo indevidamente na sua conta (ainda limitado ao mesmo cliente). Guarde tokens de forma segura, atrelados aos usuários certos.\n> - A tokenização é especialmente útil se você deseja implementar a funcionalidade \"salvar cartão para próximas compras\" em seu aplicativo, cumprindo regras PCI sem armazenar você mesmo os dados do cartão.\n\n<a name=\"parcelamento\"></a>\n### 4.5 Parcelamento no Cartão de Crédito\n\nAssim como no boleto, o Asaas suporta parcelar cobranças no cartão de crédito. Ou seja, cobrar um valor em várias vezes (parcelas) no cartão do cliente. Para isso, usamos os mesmos campos `installmentCount` e `installmentValue` na criação de uma cobrança de cartão.\n\n**Exemplo – Cobrança parcelada em 10x no cartão:**\n\n```json\n{\n    \"customer\": \"cus_000005219613\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 2000.00,\n    \"dueDate\": \"2023-07-21\",\n    \"installmentCount\": 10,\n    \"installmentValue\": 200,\n    \"creditCard\": { ... dados do cartão ... },\n    \"creditCardHolderInfo\": { ... dados do titular ... },\n    \"remoteIp\": \"116.213.42.532\"\n}\n```\n\nNo exemplo acima, cobramos R$2000 divididos em 10 parcelas de R$200 cada. Ao processar essa requisição, o Asaas realizará a cobrança parcelada no cartão (em geral, transação única autorizando as 10 parcelas). A resposta incluirá um `id` de cobrança geral e um subobjeto indicando o parcelamento.\n\n> **Limites de parcelamento:** O Asaas suporta atualmente até **21 parcelas** no cartão para bandeiras **Visa e Mastercard**. Para outras bandeiras (ex: Elo, American Express), o limite permanece **12 parcelas**. (Esses limites foram ampliados recentemente para Visa/Master; anteriormente todas bandeiras tinham limite de 12x.)  \n> **Importante:** Para cobranças sem parcelamento (1x, à vista), **não** inclua os campos de parcelamento na requisição (`installmentCount`, `installmentValue` ou `totalValue`). Utilize somente `value`. Apenas use os campos de parcelamento se `installmentCount >= 2`.\n\nQuando um pagamento parcelado no cartão é autorizado, o Asaas considera a cobrança como recebida integralmente (o valor total fica agendado para repasse conforme cada parcela for paga pelo adquirente). Em caso de necessidade de **estorno (refund)** de uma cobrança parcelada, há procedimentos específicos – ver seção [Estornos](#estornos).\n\n## 5. Assinaturas (Pagamentos Recorrentes) <a name=\"assinaturas\"></a>\n\nAssinaturas permitem programar cobranças recorrentes automáticas, seja com periodicidade mensal ou outros intervalos, sem a necessidade de criar manualmente cada cobrança. Com a API Asaas, você pode gerenciar planos de assinatura cobrando seus clientes de forma recorrente via boleto, Pix ou cartão de crédito. \n\nCada **assinatura** gera cobranças (payments) recorrentes conforme configurado. Por exemplo, uma assinatura mensal de R$100 em cartão de crédito gerará todo mês uma cobrança de R$100 no cartão do cliente até ser cancelada.\n\n**Endpoint principal:** `POST /v3/subscriptions` – Cria uma nova assinatura recorrente.\n\nParâmetros importantes ao criar uma assinatura:\n- `customer`: ID do cliente assinante.\n- `billingType`: Forma de pagamento recorrente (pode ser \"CREDIT_CARD\", \"BOLETO\" ou \"PIX\" atualmente).\n- `nextDueDate`: Data do primeiro vencimento/cobrança da assinatura.\n- `value`: Valor de cada cobrança (cada ciclo).\n- `cycle`: Periodicidade (ex.: \"MONTHLY\", \"WEEKLY\", \"YEARLY\", etc. – \"MONTHLY\" é o padrão para mensal).\n- `description`: Descrição do plano ou da assinatura.\n\nAlém disso, para **assinatura via cartão de crédito**, você pode (opcionalmente) já enviar `creditCard` e `creditCardHolderInfo` para validar e vincular o cartão na criação (detalhado abaixo).\n\n### 5.1 Criando Assinatura via Cartão de Crédito <a name=\"assinatura-cartao\"></a>\n\nA criação de uma assinatura no cartão de crédito pode seguir dois fluxos semelhantes às cobranças avulsas:\n- **Sem enviar dados de cartão:** gera-se uma assinatura *pendente*, e o cliente precisa pagar a primeira fatura manualmente (por exemplo, via invoiceUrl).\n- **Enviando os dados do cartão na criação:** o cartão é validado no ato e será cobrado automaticamente nos vencimentos.\n\nA diferença principal é que em assinaturas, ao enviar dados do cartão de imediato, o Asaas faz apenas uma **validação** do cartão no momento da criação, não uma cobrança completa (a não ser que a data de cobrança coincida com a data atual, veja dica abaixo). Ou seja, a primeira cobrança efetiva ocorrerá apenas na data `nextDueDate` informada. A validação serve para verificar se o cartão é válido e tem possibilidade de cobrança futura.\n\n**Exemplo – Criar assinatura mensal no cartão de crédito (com dados do cartão):**\n\n```json\n{\n    \"customer\": \"cus_0T1mdomVMi39\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"nextDueDate\": \"2023-10-15\",\n    \"value\": 19.90,\n    \"cycle\": \"MONTHLY\",\n    \"description\": \"Assinatura Plano Pró\",\n    \"creditCard\": {\n        \"holderName\": \"marcelo h almeida\",\n        \"number\": \"5162306219378829\",\n        \"expiryMonth\": \"05\",\n        \"expiryYear\": \"2021\",\n        \"ccv\": \"318\"\n    },\n    \"creditCardHolderInfo\": {\n        \"name\": \"Marcelo Henrique Almeida\",\n        \"email\": \"[email protected]\",\n        \"cpfCnpj\": \"24971563792\",\n        \"postalCode\": \"89223-005\",\n        \"addressNumber\": \"277\",\n        \"addressComplement\": null,\n        \"phone\": \"4738010919\",\n        \"mobilePhone\": \"47998781877\"\n    }\n}\n```\n\nNo exemplo, criamos uma assinatura mensal de R$19,90, cobrando no cartão. O `nextDueDate` é 15/10/2023, o que significa que a primeira cobrança será nessa data. Ao enviar `creditCard` e `creditCardHolderInfo`, o Asaas tenta **autorizar R$0 ou uma pequena quantia** no cartão apenas para validar (não é uma cobrança efetiva). Se a validação passar, a assinatura é criada (HTTP 200); se for negada (cartão inválido, sem limite, etc.), a assinatura não é salva e retorna erro 400.\n\nA partir daí:\n- O cartão do cliente será cobrado automaticamente **a cada ciclo** (mensal, no caso) no valor especificado.\n- Isso ocorre até que a assinatura seja cancelada ou até que o cartão se torne inválido (expirado, cancelado pelo cliente, etc.).\n- Caso o cartão não consiga ser cobrado em um dos ciclos (por exemplo, sem limite ou expirado), o Asaas marcará a parcela como falha. Você pode então notificar o cliente para atualizar o cartão ou quitar de outra forma.\n\n> **Dica:** Se você **deseja que a primeira cobrança ocorra imediatamente no ato da criação** da assinatura (em vez de esperar até o `nextDueDate`), basta definir `nextDueDate` como a data atual. Assim, o sistema já tentará cobrar a primeira parcela no momento de criar a assinatura (desde que com cartão válido). Use isso com cuidado para não surpreender o cliente; normalmente assinaturas cobram após um período (ex: um mês depois), mas há casos de cobrar imediatamente e depois periodicamente.\n\nAssim como nas cobranças avulsas, **é obrigatório usar HTTPS** se você coleta dados de cartão no seu sistema (ou app) para criar assinaturas, sob pena de bloqueio. Além disso, recomenda-se também o timeout de 60s nessas chamadas de criação de assinatura com cartão, para evitar duplicidades em caso de latência.\n\n### 5.2 Gerenciamento de Assinaturas (alterações e cancelamento) <a name=\"gerenciar-assinatura\"></a>\n\nUma vez criada a assinatura, a API oferece endpoints para consultá-la, listar todas assinaturas e cancelar ou alterar conforme necessário:\n\n- **Listar assinaturas:** `GET /v3/subscriptions` (com filtros por status, cliente, etc.).\n- **Recuperar assinatura:** `GET /v3/subscriptions/{id}` – pega detalhes de uma assinatura específica.\n- **Cancelar (remover) assinatura:** `DELETE /v3/subscriptions/{id}` – cancela uma assinatura, interrompendo cobranças futuras. As cobranças já geradas permanecem registradas.\n- **Atualizar assinatura:** `POST /v3/subscriptions/{id}` – permite alterar certos atributos de uma assinatura existente, por exemplo, o valor mensal ou a próxima data de vencimento.\n\n**Importante:** Para **alterar o valor ou a data de vencimento** de uma assinatura existente, sua conta deve ter a **tokenização ativada**. Isso porque para garantir cobranças futuras sem intervenção do cliente, o Asaas precisa ter armazenado um token do cartão (no caso de assinatura via cartão) que será reutilizado nas próximas transações.\n\nPara atualizar a assinatura via API (`POST /v3/subscriptions/{id}`):\n- Envie apenas os campos que deseja alterar (ex: `value` novo, ou `nextDueDate` nova, ou mesmo trocar `billingType` para outra forma de pagamento, se suportado).\n- **Não é necessário enviar o token** explicitamente na requisição de update; basta que a funcionalidade esteja habilitada na conta e o token já exista para aquele cliente.\n\nAo atualizar certos dados, por padrão, a mudança só afeta as **próximas cobranças** a serem geradas. Ou seja, se alterar o valor mensal de R$20 para R$30, as parcelas futuras (ainda não geradas) serão de R$30, mas qualquer cobrança já emitida antes (pendente de pagamento) continuaria com R$20. Se você quiser que *cobranças pendentes já geradas* sejam atualizadas para o novo valor ou forma de pagamento, você pode passar o parâmetro `updatePendingPayments: true` na requisição de atualização. Com isso, quaisquer parcelas pendentes não pagas serão recriadas com as novas informações (por exemplo, útil se o cliente mudou de plano e as próximas faturas abertas devem refletir o novo valor).\n\n> **Exemplo:** Um cliente tinha uma assinatura de R$50 mensais no boleto, com próxima fatura em aberto. Ele atualiza para plano de R$80 e quer pagar no cartão. Você faz `POST /v3/subscriptions/{id}` com `{ \"value\": 80.0, \"billingType\": \"CREDIT_CARD\", \"updatePendingPayments\": true }`. Sua conta precisa ter tokenização ativa (pois está mudando para cartão). O Asaas então cancela a fatura de R$50 em aberto e gera uma nova cobrança de R$80 no cartão (tentando cobrança imediata se já houver token).\n\nNo geral, assinaturas facilitam muito a cobrança recorrente. Lembre-se de cancelar a assinatura via API ou painel caso o cliente encerre o serviço/contrato, para não gerar cobranças indevidas.\n\n<a name=\"webhooks\"></a>\n## 6. Notificações e Webhooks\n\nPara manter seu sistema sincronizado com os eventos do Asaas (como pagamentos realizados, vencimentos, falhas de pagamento, etc.), você pode usar **notificações automáticas** e **Webhooks**:\n\n- **Notificações por email/SMS (padrão):** O Asaas por padrão envia notificações para seus clientes (pagadores) sobre cobranças – por exemplo, aviso de boleto prestes a vencer, confirmação de pagamento recebido, etc. Você pode **customizar essas notificações** ou até desativá-las via API:\n  - Ver **Notificações Padrões** para ver quais são enviadas automaticamente.\n  - Use o endpoint `POST /v3/customers/{id}/notificationPreferences` ou similar para alterar as preferências de notificação de um cliente. Por exemplo, escolher se ele recebe SMS, email, ambos ou nenhum, para cada tipo de evento.\n  - Isso garante uma régua de cobrança automática sem você precisar programar lembretes por conta própria.\n\n- **Webhooks (callback HTTP em tempo real):** Essa é a forma recomendada de integrar seu sistema para receber informações sobre eventos assim que eles acontecem, sem polling constante. Você pode registrar URLs do seu sistema para serem chamadas pelo Asaas em determinados eventos, como:\n  - Cobrança paga, vencida, expirada ou alterada.\n  - Assinatura criada, cancelada ou cobrança de assinatura falhou.\n  - Chargeback ocorrido, estorno realizado.\n  - Transferência realizada.\n  - Entre outros eventos (há uma lista completa de eventos de webhook disponíveis).\n\n**Cadastro de Webhook:** Pode ser feito pelo painel web ou via API. Via API, use o endpoint `POST /v3/webhook` (ou semelhante) enviando:\n- `email` (se aplicável, para notificações de falha),\n- `url` (a URL do seu endpoint que receberá o POST dos eventos),\n- `event` (tipo de evento que quer ouvir, ex: `PAYMENT_RECEIVED`, `PAYMENT_OVERDUE`, `SUBSCRIPTION_CREATED`, etc.). Você pode criar múltiplos webhooks para distintos eventos ou um único que receba todos.\n\n**Recebendo Webhooks:** Quando um evento ocorre (ex: um boleto foi pago), o Asaas envia uma requisição POST para a URL registrada, com um JSON no corpo contendo os detalhes do evento e do objeto envolvido (por ex., dados da cobrança paga). Seu sistema deve receber essa requisição e processar conforme necessário (por exemplo, marcar uma fatura interna como paga, liberar acesso a um serviço, etc.). É importante retornar HTTP 200 rapidamente para confirmar recebimento. Se seu endpoint não responder ou retornar diferente de 2xx, o Asaas tentará reenviar algumas vezes (estratégia de retentativa).\n\n**Segurança em Webhooks:** Recomenda-se implementar mecanismos de validação para garantir que a requisição recebida realmente veio do Asaas:\n- Validar o header `asaas-signature` (se fornecido) ou verificar IPs de origem (o Asaas disponibiliza uma lista de IPs oficiais para permitir).\n- Usar chaves secretas ou tokens na URL para confirmação.\n- O Asaas tem guia de [Idempotência e segurança de Webhooks], caso precise garantir que não processe eventos duplicados e confirme saques via webhook (em casos de transferências).\n\n**Polling vs Webhook:** Você pode também optar por consultar periodicamente (poll) a API para verificar status de cobranças, mas isso gera mais carga e latência. Webhooks são mais eficientes, pois seu sistema é notificado instantaneamente quando algo acontece. A menos que você não consiga expor um endpoint público, prefira usar webhooks em produção.\n\n**Exemplo de evento de webhook (resumo):** Um webhook de pagamento recebido (`PAYMENT_RECEIVED`) trará um JSON contendo, por exemplo:\n```json\n{\n  \"event\": \"PAYMENT_RECEIVED\",\n  \"payment\": {\n    \"id\": \"pay_123456789\",\n    \"value\": 100.00,\n    \"netValue\": 97.00,\n    \"billingType\": \"BOLETO\",\n    \"status\": \"RECEIVED\",\n    \"customer\": \"cus_000005219613\",\n    ...\n  },\n  \"dateCreated\": \"2023-07-21T12:34:56\"\n}\n```\nVocê pode verificar `event` para saber do que se trata e então processar o objeto (`payment` no caso) conforme sua lógica de negócio.\n\n**Logs e Retentativas:** A API oferece endpoints para listar webhooks cadastrados, verificar **logs de webhook** (histórico de envios e respostas) e gerenciar fila pausada (caso seu endpoint fique fora do ar, os eventos ficam em fila). Veja seções de Webhooks na documentação para mais detalhes.\n\nEm resumo, **habilite webhooks** para ficar sabendo em tempo real sobre pagamentos confirmados, falhas de cobrança em assinaturas, chargebacks, etc., integrando completamente o Asaas ao seu fluxo.\n\n<a name=\"outros\"></a>\n## 7. Outros Endpoints e Funcionalidades Relevantes\n\nAlém dos fluxos principais de clientes, cobranças (boletos, Pix, cartões) e assinaturas, a API Asaas fornece uma variedade de outros endpoints úteis para completar a integração de um sistema financeiro. Mencionamos aqui alguns que podem ser importantes para um webapp típico:\n\n<a name=\"consulta-cobrancas\"></a>\n### 7.1 Consultando Cobranças e Pagamentos\n\nDepois de criar cobranças, você pode consultar seus detalhes ou listar múltiplas cobranças:\n\n- **Listar cobranças/pagamentos:** `GET /v3/payments` – Retorna uma lista paginada de cobranças existentes. Aceita filtros como `customer` (ID do cliente para listar cobranças dele), `status` (STATUS da cobrança: PENDING, RECEIVED, OVERDUE, etc.), período de vencimento (`dueDate[ge]`, `dueDate[le]`), entre outros. Por exemplo, `GET /v3/payments?customer=cus_12345&status=OVERDUE` listaria todos pagamentos vencidos de um cliente específico.\n\n- **Recuperar uma cobrança específica:** `GET /v3/payments/{id}` – Retorna os detalhes completos de uma cobrança (payment) pelo ID. Isso é útil para consultar o status atualizado de um pagamento em particular. Por exemplo, após redirecionar o cliente para pagar, você pode eventualmente consultar se `status` mudou para RECEIVED. (Embora webhooks façam isso automaticamente, consultas diretas podem ser usadas como fallback ou em rotinas de sincronização).\n\n  *Exemplo:* `GET https://api.asaas.com/v3/payments/pay_123456789` retorna:\n  ```json\n  {\n    \"id\": \"pay_123456789\",\n    \"description\": \"Cobranca exemplo\",\n    \"billingType\": \"BOLETO\",\n    \"value\": 100.00,\n    \"dueDate\": \"2023-07-21\",\n    \"status\": \"RECEIVED\",\n    \"dateCreated\": \"2023-07-01\",\n    \"invoiceUrl\": \"https://sandbox.asaas.com/payment/...\n    \"bankSlipUrl\": \"https://sandbox.asaas.com/b/pdf/...\n    \"customer\": \"cus_000005219613\",\n    \"refunds\": [ ... ], \n    ... outros campos ...\n  }\n  ```\n  Note o campo `status`: quando a cobrança é paga, torna-se \"RECEIVED\". Outros status possíveis: \"PENDING\" (pendente/aguardando pagamento), \"OVERDUE\" (vencida e não paga), \"REFUNDED\" (reembolsada), \"RECEIVED_IN_CASH\" (recebida em dinheiro, no caso de confirmação manual), etc.\n\n- **Obter boletos ou QRCode novamente:** Caso precise re-obter o PDF do boleto ou o QR Code Pix, há endpoints dedicados:\n  - `GET /v3/payments/{id}/identificationField` – retorna a linha digitável do boleto.\n  - `GET /v3/payments/{id}/pixQrCode` – retorna o código Pix (já mencionado).\n  - Ambos requerem o ID da cobrança.\n\n- **Verificar faturas de assinatura:** Para assinaturas, você pode listar as cobranças geradas por uma assinatura através de `GET /v3/payments?subscription={subscription_id}` ou usar endpoints como `GET /v3/subscriptions/{id}/payments` (se disponível), para ver o histórico de pagamentos daquela assinatura, incluindo os futuros agendados e pagos.\n\n- **Filtros diversos:** A API permite vários filtros interessantes, por exemplo:\n  - Filtrar por *externalReference* (se você usou referência externa nas cobranças).\n  - Filtrar por *nosso número* ou *ID de pagamento do banco* (no caso de boletos, se necessário).\n  - Ordenação por data de criação ou vencimento.\n\nConsultar as cobranças é importante para construir telas de gerenciamento no seu app (lista de cobranças do usuário, detalhes de pagamentos, etc.).\n\n<a name=\"estornos\"></a>\n### 7.2 Estornos (Reembolsos) de Pagamentos\n\nEm casos onde um pagamento precisa ser devolvido ao pagador (por cancelamento de venda, arrependimento, ou erro), a API permite **estornar** cobranças recebidas, dependendo da forma de pagamento:\n\n- **Estornar pagamento via Cartão de Crédito:** É possível estornar cobranças por cartão que já estão recebidas ou confirmadas. Ao estornar, o valor correspondente é debitado do seu saldo Asaas (ou seja, devolve ao cliente pagador) e a cobrança muda de status para **REFUNDED**. O endpoint para estorno de cobrança avulsa é `POST /v3/payments/{id}/refund`.\n\n- **Estornar pagamento via Pix:** Pix também pode ser estornado via API se já foi recebido. Por trás dos panos, isso gera uma transação Pix de devolução ao pagador original. O endpoint é o mesmo (`/payments/{id}/refund`), e se a cobrança foi paga via Pix, o Asaas processará a devolução para a chave Pix pagadora.\n\n- **Estornar pagamento via Boleto:** Boletos pagos podem ser estornados, mas o processo é diferente devido à natureza do boleto (pagamentos em dinheiro ou transferência recebidos na conta Asaas). Ao chamar o endpoint de estorno para um boleto, o Asaas **não tem automaticamente os dados bancários do pagador**. Assim, o Asaas retornará um **link** que deve ser fornecido ao cliente pagador. Nesse link, o cliente preencherá seus dados bancários para receber o reembolso. Somente após o cliente fornecer essas informações o Asaas concluirá o reembolso via transferência bancária.\n\n- **Parcelamentos:** No caso de cobranças parceladas no cartão, também é possível estornar mesmo após algumas parcelas pagas. O processo, porém, geralmente estorna o valor total ou restante e envolve cancelar as parcelas futuras na operadora. O Asaas oferece endpoints específicos como `POST /v3/installments/{id}/refund` (estornar parcelamento). Isso irá estornar todas as parcelas já pagas e cancelar as restantes. Se precisar estornar apenas parcela individual, é algo a alinhar com o suporte Asaas/operadora.\n\n**Utilização:** Para estornar via API, certifique-se de ter saldo suficiente na conta Asaas (no caso de boleto, cartão e pix, o valor precisa ser devolvido do seu saldo). Estornos geralmente só são possíveis após o pagamento estar completamente confirmado (não durante processamento). Após acionar o estorno, acompanhe o status da cobrança: o campo `refunds` no objeto da cobrança listará registros de estorno efetuados, incluindo data e valor. Exemplo de trecho de resposta de uma cobrança com estorno realizado:\n\n```json\n\"refunds\": [\n    {\n       \"dateCreated\": \"2022-02-21 10:28:40\",\n       \"value\": 50.00,\n       \"description\": \"Estorno pedido via API\"\n    }\n]\n```\n\n> **Nota:** Por questões das operadoras, **estornos em cartão** geralmente podem ser efetuados até 90 dias da data da venda (depende da adquirente). Após esse período, ou se já liquidado, talvez seja necessário realizar devolução por fora (ex: transferência). Para Pix, o estorno só é possível no mesmo dia da liquidação para ser automático; depois disso deve-se fazer um Pix de devolução manualmente (mas a Asaas abstrai isso se tiver dados do pagador).  \n> Para boletos, caso o pagador não acesse o link de reembolso fornecido, você pode ter que combinar outra forma de devolver (ex: pedir dados e usar `POST /v3/transfers` da sua conta para o cliente – ver Transferências abaixo).\n\n<a name=\"payment-link\"></a>\n### 7.3 Links de Pagamento\n\n**Link de pagamento** é uma funcionalidade que permite criar um link único que pode conter uma ou várias cobranças (itens) e ser enviado ao cliente para pagamento. Diferente de `/payments` que cria uma cobrança específica para um cliente, o **payment link** pode ser usado de forma mais genérica, até publicado em sites ou enviado via redes sociais, permitindo que qualquer pagador acesse e pague.\n\n- **Endpoint:** `POST /v3/paymentLinks` – Cria um novo link de pagamento.\n\nNa criação do link, você pode definir:\n  - **name**: Nome do produto/serviço ou do link.\n  - **description**: Descrição opcional.\n  - **items**: Uma lista de itens, cada um com descrição e valor (pode ser usado para somar vários itens em uma compra).\n  - **chargeType**: Se é um pagamento único ou recorrente.\n  - **expireDate**: Data de expiração do link.\n  - **allowedPaymentMethods**: Quais métodos de pagamento o link aceitará (PIX, BOLETO, CREDIT_CARD, etc).\n\nA resposta incluirá um campo `url` com o link público. Quando um cliente acessa esse link, ele verá uma página de checkout Asaas listando os itens e valor total e poderá escolher a forma de pagamento dentre as permitidas. Após o pagamento, você receberá via webhooks a notificação e poderá identificar pelo ID do pagamento gerado e pelo campo `externalReference` ou outro que você amarrar.\n\nLinks de pagamento são úteis para cenários de e-commerce simples, vendas esporádicas ou quando você não quer criar previamente um cliente no sistema (o pagador preencherá os dados básicos no checkout do link).\n\n<a name=\"transferencias\"></a>\n### 7.4 Transferências de Fundos\n\nO saldo que você recebe das cobranças fica na **conta Asaas** vinculada à sua API Key. Para usar esses valores fora do Asaas (por exemplo, transferir para sua conta bancária empresarial, ou pagar fornecedores), existem endpoints de **transferência**:\n\n- **Transferir para conta bancária externa (TED/Pix):** `POST /v3/transfers` – Permite transferir um valor do seu saldo Asaas para uma conta bancária informada. Você precisará fornecer os dados bancários de destino ou uma chave Pix de destino. Se você fornecer uma chave Pix, o Asaas fará via Pix; se fornecer agência/conta bancária, fará via TED/DOC conforme necessário.\n\n- **Transferir para outra conta Asaas:** Se você tiver um **ecossistema de subcontas** (por exemplo, marketplace com split – ver subcontas abaixo), pode transferir saldo entre contas Asaas diretamente. Endpoint `POST /v3/transfers/to-account` (ou similar) – transfere valor da conta principal para uma subconta ou vice-versa, identificando pelo `walletId` da conta de destino.\n\n- **Consultar transferências:** `GET /v3/transfers` lista as transferências efetuadas, e `GET /v3/transfers/{id}` dá detalhes de uma específica (status, data de liquidação, etc.). Também há eventos de webhook para transferência realizada (`TRANSFER_DONE`) e falhada.\n\n- **Validação via webhook:** Para segurança em automações de saque, o Asaas oferece um *Mecanismo de validação de saque via webhooks*. Basicamente, você pode configurar para que cada solicitação de transferência gere um webhook que você precisa responder (aprovando ou negando) para que ela seja efetivada.\n\n**Exemplo – Transferir via Pix (chave aleatória):**\n\n```json\n{\n  \"value\": 150.00,\n  \"bankAccount\": {\n    \"pixKey\": \"[email protected]\",\n    \"pixKeyType\": \"EMAIL\"\n  },\n  \"description\": \"Retirada de saldo - mês 07/2023\"\n}\n```\n\nEsse JSON transferiria R$150,00 do saldo Asaas para a chave Pix de email **cliente@example.com**. Se bem-sucedido, o dinheiro sai do saldo e cai na conta associada a essa chave.\n\n### 7.5 Subcontas e Split de Pagamentos\n\n*(Opcional, avançado)* Se sua aplicação envolve receber pagamentos para terceiros (marketplace, SaaS multi-tenant, etc.), o Asaas oferece **Subcontas**: você pode criar contas separadas dentro da sua conta mestre, cada uma com sua própria API Key e saldo. Em conjunto, o **Split de Pagamentos** permite dividir automaticamente o valor de uma cobrança entre a conta principal e subcontas no momento do recebimento.\n\n- **Criação de subconta:** `POST /v3/accounts` (endpoint para criar nova conta vinculada). Retorna uma nova `apiKey` e `walletId` da subconta. É possível especificar dados do responsável, configurações white-label, etc.\n- **Split em cobrança:** Nos endpoints de criar cobrança (`/payments`), você pode adicionar o objeto `split` especificando divisões de percentual ou valor fixo para determinadas contas (usando walletId das subcontas). Assim, quando o pagamento é recebido, cada conta recebe sua parte automaticamente.\n\nEssa funcionalidade é bastante útil mas envolve configuração mais complexa, então para uma primeira integração básica você pode ignorar. Mencionei aqui apenas caso seu projeto cresça para necessitar isso; a documentação oficial tem seções dedicadas a Split de pagamento e Subcontas.\n\n<a name=\"melhores-praticas\"></a>\n## 8. Melhores Práticas de Implementação\n\nPara uma integração robusta e segura com a API Asaas, atente às seguintes recomendações:\n\n- **Use o Sandbox extensivamente:** Durante o desenvolvimento, realize todos os testes no ambiente sandbox. Crie clientes, emita cobranças de teste, simule pagamentos (p. ex., marque boletos como pagos via painel sandbox, use cartões de teste etc.) e valide se seu sistema responde corretamente (webhooks recebidos, atualizações de status, etc.). Somente após tudo validado, aponte para produção com a chave de produção.\n\n- **Não exponha dados sensíveis no front-end:** Mantenha a lógica de chamadas à API Asaas no back-end do seu aplicativo sempre que possível. Se precisar chamar direto do front-end (por exemplo, usando AJAX), nunca inclua a API Key diretamente no código cliente. Em vez disso, utilize seu servidor como proxy ou use mecanismos de autenticação temporária.\n\n- **HTTPS obrigatório:** Já destacado, mas nunca é demais lembrar – garanta que todas as integrações client-side ocorram em páginas HTTPS. Além disso, seu servidor ao chamar a API Asaas também deve usar HTTPS (o endpoint da Asaas já requer isso). Certificados inválidos ou ambiente de teste sem HTTPS podem bloquear funcionalidades (especialmente cartões).\n\n- **Timeouts e Retentativas:** Ao chamar a API, considere implementar um tempo de espera adequado (pelo menos 60s para operações de cartão). Trate retentativas com cuidado para não gerar operações duplicadas: caso receba timeout sem confirmação, cheque o status antes de tentar de novo.\n\n- **Armazene identificadores e referências:** Guarde os `id` retornados para clientes, cobranças, assinaturas, etc., no seu banco de dados. Eles serão a chave para consultar ou cancelar algo posteriormente. Utilize também o campo `externalReference` fornecido pelo Asaas em cobranças/assinaturas para armazenar um identificador do seu sistema (por exemplo, ID da ordem interna), facilitando conciliar eventos que chegam via webhook com registros do seu sistema.\n\n- **Webhooks vs Polling:** Conforme discutido, prefira Webhooks para notificações de eventos. Configure pelo menos um endpoint seguro no seu sistema para recebê-los. Implemente logs desses recebimentos e reaja de forma idempotente (garantir que processar duas vezes o mesmo evento não cause inconsistência, pois pode haver tentativas duplicadas). Evite consultas constantes à API em loops muito frequentes; respeite os limites e use filtros se precisar sincronizar dados.\n\n- **Idempotência de requisições:** A API Asaas não documenta explicitamente mecanismos de idempotency keys nas requisições. Portanto, se seu caso requer prevenção de duplicatas (ex: usuário clicou duas vezes em \"pagar\"), implemente do seu lado um controle para não enviar duas requisições idênticas de criação. Em caso de incerteza do resultado de uma chamada, verifique o status antes de repetir.\n\n- **Monitore Limites da API:** A Asaas possui limites de requisição para prevenir abuso (por ex., número de chamadas por minuto). Consulte a seção \"Limites da API\" e planeje filas ou backoff exponencial se necessário. Tipicamente, operações intensivas (como listar com grandes volumes) devem ser paginadas e não repetidas em alta frequência.\n\n- **Atualizações e Changelog:** Acompanhe o changelog da API Asaas para saber de novas funcionalidades ou alterações (breaking changes) em endpoints. A versão v3 pode evoluir, e a Asaas geralmente anuncia deprecações com antecedência. Mantenha sua integração atualizada conforme necessário.\n\n- **Teste de produção em menor escala:** Quando for migrar do sandbox para produção, se possível faça um teste real com um valor baixo para validar fluxo real de dinheiro. Verifique se a notificação de pagamento ocorreu, se o saldo foi atualizado, etc., antes de liberar para todos os usuários/clientes.\n\n- **Suporte e Comunidade:** Se encontrar dificuldades, a Asaas oferece canais de suporte e uma comunidade de desenvolvedores. Consulte a seção de *Canais de suporte* e o *Discord do Asaas* para obter ajuda, além dos artigos de ajuda online.\n\nSeguindo essas práticas, você terá uma integração confiável, evitando surpresas em produção e oferecendo uma boa experiência tanto para seu usuário final quanto para você, desenvolvedor, ao manter o sistema.\n\n<a name=\"exemplos-json\"></a>\n## 9. Exemplos de Requisições e Respostas\n\nPara consolidar, veja abaixo **resumos de exemplos** de chamadas API com suas respostas típicas em JSON:\n\n- **Exemplo 1: Criar Cliente**\n\n  **Requisição:** `POST /v3/customers`  \n  **Body:** \n  ```json\n  {\n    \"name\": \"Ana Silva\",\n    \"cpfCnpj\": \"12345678901\",\n    \"email\": \"[email protected]\",\n    \"mobilePhone\": \"11988887777\"\n  }\n  ```  \n\n  **Resposta (sucesso 200):**  \n  ```json\n  {\n    \"object\": \"customer\",\n    \"id\": \"cus_000006789012\",\n    \"name\": \"Ana Silva\",\n    \"cpfCnpj\": \"12345678901\",\n    \"email\": \"[email protected]\",\n    \"mobilePhone\": \"11988887777\",\n    \"dateCreated\": \"2025-02-26\",\n    \"description\": null,\n    \"additionalEmails\": null,\n    \"externalReference\": null,\n    \"notificationDisabled\": false,\n    \"city\": null,\n    \"state\": null,\n    \"country\": \"BR\",\n    \"postalCode\": null,\n    \"address\": null,\n    \"addressNumber\": null,\n    \"complement\": null,\n    \"province\": null\n  }\n  ```\n  *Observação:* campos não informados aparecem como `null` ou valores padrão. Guarde o `id` para uso posterior.\n\n- **Exemplo 2: Criar Cobrança (Boleto)**\n\n  **Requisição:** `POST /v3/payments`  \n  **Body:** \n  ```json\n  {\n    \"customer\": \"cus_000006789012\",\n    \"billingType\": \"BOLETO\",\n    \"value\": 250.50,\n    \"dueDate\": \"2025-03-10\",\n    \"description\": \"Serviços de consultoria\",\n    \"externalReference\": \"PED-12345\"\n  }\n  ```  \n\n  **Resposta (sucesso 200):**  \n  ```json\n  {\n    \"object\": \"payment\",\n    \"id\": \"pay_567890123456\",\n    \"dateCreated\": \"2025-02-26\",\n    \"customer\": \"cus_000006789012\",\n    \"value\": 250.50,\n    \"netValue\": 250.50,\n    \"originalValue\": 250.50,\n    \"billingType\": \"BOLETO\",\n    \"status\": \"PENDING\",\n    \"description\": \"Serviços de consultoria\",\n    \"externalReference\": \"PED-12345\",\n    \"dueDate\": \"2025-03-10\",\n    \"invoiceUrl\": \"https://www.asaas.com/i/567890123456\",\n    \"bankSlipUrl\": \"https://www.asaas.com/b/pdf/abcdefghij\",\n    \"invoiceNumber\": \"1234\",\n    \"deleted\": false,\n    \"postalService\": false\n  }\n  ```\n  Aqui, a cobrança foi criada e está pendente (aguardando pagamento). `invoiceUrl` leva à página de pagamento (que neste caso mostrará o boleto). `bankSlipUrl` é o PDF do boleto. `netValue` é o valor líquido após taxas (no caso de boleto, a taxa será descontada só quando pago; aqui aparece igual ao valor bruto enquanto não pago).\n\n- **Exemplo 3: Criar Cobrança (Cartão, pagamento imediato)**\n\n  **Requisição:** `POST /v3/payments`  \n  **Body:** *(resumido, incluindo dados do cartão)*  \n  ```json\n  {\n    \"customer\": \"cus_000006789012\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 120.00,\n    \"dueDate\": \"2025-02-26\",\n    \"creditCard\": {\n      \"holderName\": \"ANA SILVA\",\n      \"number\": \"4111111111111111\",\n      \"expiryMonth\": \"12\",\n      \"expiryYear\": \"2026\",\n      \"ccv\": \"123\"\n    },\n    \"creditCardHolderInfo\": {\n      \"name\": \"Ana Silva\",\n      \"email\": \"[email protected]\",\n      \"cpfCnpj\": \"12345678901\",\n      \"postalCode\": \"01310-000\",\n      \"addressNumber\": \"100\",\n      \"addressComplement\": \"Sala 101\",\n      \"phone\": \"1133221100\",\n      \"mobilePhone\": \"11988887777\"\n    }\n  }\n  ```\n\n  **Resposta (sucesso 200, autorizada):**  \n  ```json\n  {\n    \"object\": \"payment\",\n    \"id\": \"pay_112233445566\",\n    \"dateCreated\": \"2025-02-26\",\n    \"customer\": \"cus_000006789012\",\n    \"value\": 120.00,\n    \"netValue\": 116.40,\n    \"originalValue\": 120.00,\n    \"billingType\": \"CREDIT_CARD\",\n    \"status\": \"RECEIVED\",\n    \"description\": null,\n    \"creditCard\": {\n      \"creditCardNumber\": \"1111\",\n      \"creditCardBrand\": \"VISA\",\n      \"creditCardToken\": \"a1b2c3d4-e5f6-7890-abcd-ef0123456789\"\n    },\n    \"dueDate\": \"2025-02-26\",\n    \"invoiceUrl\": \"https://www.asaas.com/i/112233445566\",\n    \"invoiceNumber\": \"1235\",\n    \"deleted\": false\n  }\n  ```\n  Observações: `status: RECEIVED` já indica pago com sucesso. O objeto `creditCard` na resposta traz **somente os últimos dígitos** (`creditCardNumber`: \"1111\"), a bandeira, e um `creditCardToken` gerado. Esse token pode ser usado para futuras cobranças no mesmo cliente sem reenvio dos dados do cartão. Note também que `netValue` é o valor líquido após taxas de cartão (por exemplo, R$116,40 líquido para R$120 bruto, assumindo ~3% de taxa).\n\n  **Resposta (falha 400, cartão negado):**  \n  ```json\n  {\n    \"errors\": [\n      {\n        \"code\": \"invalid_creditCard\",\n        \"description\": \"Transação não autorizada. Verifique os dados do cartão de crédito e tente novamente.\"\n      }\n    ]\n  }\n  ```\n  Nesse caso, a transação foi negada e nenhum pagamento foi criado. A mensagem é genérica.\n\n- **Exemplo 4: Criar Assinatura (Cartão)**\n\n  **Requisição:** `POST /v3/subscriptions`  \n  **Body:**  \n  ```json\n  {\n    \"customer\": \"cus_000006789012\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"nextDueDate\": \"2025-03-15\",\n    \"value\": 50.00,\n    \"cycle\": \"MONTHLY\",\n    \"description\": \"Assinatura Premium\",\n    \"creditCard\": {\n      \"holderName\": \"ANA SILVA\",\n      \"number\": \"4111111111111111\",\n      \"expiryMonth\": \"12\",\n      \"expiryYear\": \"2026\",\n      \"ccv\": \"123\"\n    },\n    \"creditCardHolderInfo\": {\n      \"name\": \"Ana Silva\",\n      \"email\": \"[email protected]\",\n      \"cpfCnpj\": \"12345678901\",\n      \"postalCode\": \"01310-000\",\n      \"addressNumber\": \"100\",\n      \"addressComplement\": null,\n      \"phone\": \"1133221100\",\n      \"mobilePhone\": \"11988887777\"\n    }\n  }\n  ```\n\n  **Resposta (sucesso 200):**  \n  ```json\n  {\n    \"object\": \"subscription\",\n    \"id\": \"sub_ABCDEF123456\",\n    \"dateCreated\": \"2025-02-26\",\n    \"customer\": \"cus_000006789012\",\n    \"billingType\": \"CREDIT_CARD\",\n    \"value\": 50.00,\n    \"nextDueDate\": \"2025-03-15\",\n    \"cycle\": \"MONTHLY\",\n    \"description\": \"Assinatura Premium\",\n    \"status\": \"ACTIVE\",\n    \"creditCard\": {\n      \"creditCardNumber\": \"1111\",\n      \"creditCardBrand\": \"VISA\"\n    }\n  }\n  ```\n  A assinatura é criada e ativa. A primeira cobrança ocorrerá em 15/03/2025 automaticamente.\n\n- **Exemplo 5: Recebimento de Webhook (JSON enviado por Asaas)**\n\n  Imagine que o boleto do Exemplo 2 foi pago. Se você cadastrou um webhook para evento `PAYMENT_RECEIVED`, seu endpoint receberia algo como:\n\n  ```json\n  {\n    \"event\": \"PAYMENT_RECEIVED\",\n    \"payment\": {\n      \"id\": \"pay_567890123456\",\n      \"status\": \"RECEIVED\",\n      \"value\": 250.50,\n      \"netValue\": 247.00,\n      \"billingType\": \"BOLETO\",\n      \"paymentDate\": \"2025-03-05\",\n      \"customer\": \"cus_000006789012\",\n      \"invoiceUrl\": \"https://www.asaas.com/i/567890123456\",\n      \"creditDate\": \"2025-03-06\",\n      \"externalReference\": \"PED-12345\",\n      ... outros campos ...\n    },\n    \"company\": {\n      \"id\": \"comp_1234567890\",\n      \"name\": \"Minha Empresa LTDA\"\n    }\n  }\n  ```\n  Seu sistema deve então identificar `event: PAYMENT_RECEIVED` e, por exemplo, marcar o pedido \"PED-12345\" como pago em seu banco de dados.\n\n---\n\nEsses exemplos cobrem as situações mais comuns. Para quaisquer outros endpoints ou dúvidas, consulte a [documentação oficial do Asaas](https://docs.asaas.com) ou entre em contato com o suporte do Asaas. Com este guia, você deve estar apto a integrar as principais funcionalidades da API Asaas ao seu aplicativo JavaScript e backend, realizando desde o cadastro de clientes até cobranças one-off e recorrentes, garantindo uma integração segura e eficiente. Boa codificação!\n"
}
